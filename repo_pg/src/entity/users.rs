//! SeaORM Entity. Generated by sea-orm-codegen 0.5.0

use super::sea_orm_active_enums::UserRole;
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]
#[sea_orm(table_name = "users")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub display_name: String,
    pub email: String,
    pub password: String,
    pub created_at: DateTime,
    pub updated_at: Option<DateTime>,
    pub role: UserRole,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::verify_email_tokens::Entity")]
    VerifyEmailTokens,
    #[sea_orm(has_many = "super::blog_post_comment_ratings::Entity")]
    BlogPostCommentRatings,
    #[sea_orm(has_many = "super::blog_post_comment_flags::Entity")]
    BlogPostCommentFlags,
    #[sea_orm(has_many = "super::blog_posts::Entity")]
    BlogPosts,
    #[sea_orm(has_many = "super::blog_post_comments::Entity")]
    BlogPostComments,
    #[sea_orm(has_many = "super::refresh_tokens::Entity")]
    RefreshTokens,
    #[sea_orm(has_many = "super::uploaded_images::Entity")]
    UploadedImages,
    #[sea_orm(has_many = "super::change_password_tokens::Entity")]
    ChangePasswordTokens,
    #[sea_orm(has_many = "super::admin_logs::Entity")]
    AdminLogs,
}

impl Related<super::verify_email_tokens::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::VerifyEmailTokens.def()
    }
}

impl Related<super::blog_post_comment_ratings::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::BlogPostCommentRatings.def()
    }
}

impl Related<super::blog_post_comment_flags::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::BlogPostCommentFlags.def()
    }
}

impl Related<super::blog_posts::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::BlogPosts.def()
    }
}

impl Related<super::blog_post_comments::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::BlogPostComments.def()
    }
}

impl Related<super::refresh_tokens::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::RefreshTokens.def()
    }
}

impl Related<super::uploaded_images::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UploadedImages.def()
    }
}

impl Related<super::change_password_tokens::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ChangePasswordTokens.def()
    }
}

impl Related<super::admin_logs::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AdminLogs.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
