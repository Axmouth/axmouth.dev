//! SeaORM Entity. Generated by sea-orm-codegen 0.5.0

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]
#[sea_orm(table_name = "blog_post_comments")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    #[sea_orm(column_type = "Text")]
    pub body: String,
    pub created_at: DateTime,
    pub updated_at: Option<DateTime>,
    pub author_id: i32,
    pub post_id: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::users::Entity",
        from = "Column::AuthorId",
        to = "super::users::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Users,
    #[sea_orm(
        belongs_to = "super::blog_posts::Entity",
        from = "Column::PostId",
        to = "super::blog_posts::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    BlogPosts,
    #[sea_orm(has_many = "super::blog_post_comment_ratings::Entity")]
    BlogPostCommentRatings,
    #[sea_orm(has_many = "super::blog_post_comment_flags::Entity")]
    BlogPostCommentFlags,
}

impl Related<super::users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Users.def()
    }
}

impl Related<super::blog_posts::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::BlogPosts.def()
    }
}

impl Related<super::blog_post_comment_ratings::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::BlogPostCommentRatings.def()
    }
}

impl Related<super::blog_post_comment_flags::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::BlogPostCommentFlags.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
